VISÃO GERAL DO PRODUTO



1.1. Título:  
Aplicação Web – Semente de Projeto



1.2. Subtítulo:  
“Seu Guia para Editais e Políticas”



1.3. Objetivo Geral:  
Desenvolver uma aplicação web simples, intuitiva e responsiva, que auxilie jovens e comunidades (especialmente Povos e Comunidades Tradicionais – PCTs) na navegação e compreensão de editais, na elaboração de projetos e no acompanhamento dos processos, agregando valor por meio de conteúdo e recursos práticos (templates, checklists, glossário etc.).



──────────────────────────────

PROBLEMA E OPORTUNIDADE



2.1. Problema Identificado:  
• Jovens e comunidades têm dificuldade em identificar, interpretar e elaborar projetos compatíveis com editais e políticas públicas, devido à linguagem técnica e estrutura complexa dos documentos.  
• Falta de um guia interativo que explique de forma simples cada etapa do processo – desde a busca dos editais até a submissão e acompanhamento dos projetos.



2.2. Oportunidade:  
• Facilitar o acesso e entendimento dos editais, ajudando na capacitação dos usuários por meio de módulos que orientam sobre a elaboração e submissão de propostas.  
• Incentivar o uso digital (mobile-first), com interface limpa, responsiva e intuitiva, adaptando as informações para públicos que podem ter menor familiaridade com tecnologia.



──────────────────────────────

PÚBLICO-ALVO



• Jovens e representantes de comunidades PCTs.  
• Organizações locais que apoiam esses grupos.  
• Agentes facilitadores (ONGs, associações e secretarias locais) que podem usar ou referenciar a aplicação para capacitar seus públicos.

──────────────────────────────

FUNCIONALIDADES



5.1. Funcionalidades Gerais:  
a) Interface Responsiva – Layouts distintos para Desktop e Mobile, conforme os wireframes apresentados.  
b) Navegação intuitiva com Header fixo e Sidebar interativo (overlay no mobile).  
c) Uso de componentes reutilizáveis (ex.: DownloadButton, ChecklistItem, SidebarItem).



5.2. Funcionalidades por Módulo



• Módulo 1 – Ferramentas:  

Página introdutória com conteúdo “Bem-vindo(a)!”.  

Itens: Introdução, Formatação Texto, Imagens e Templates.  

Apresentação de templates para download (.docx, .odt, .xlsx).



• Módulo 2 – Pesquisa:  

Conteúdo explicando “Onde Buscar?” editais e oportunidades.  

Seção sobre o uso de IAs (chatbots) e alertas relevantes.  

Links e referências para órgãos e plataformas de editais.



• Módulo 3 – Decifrando Editais e Políticas para PCTs:  

“Anatomia de um Edital”: Seção interativa que detalha cada parte do edital (Objeto, Público-alvo, Prazos, Documentação, Critérios).  

Glossário de Termos – com explicações simples de termos técnicos.  

Seção “Seus Direitos e Políticas”: Resumos das principais políticas públicas e links com explicações.



• Módulo 4 – Elaborando Propostas:  

Estrutura básica de um projeto (Título, Justificativa, Objetivos, Metodologia, Cronograma, Orçamento).  

Disponibilização de modelos/templates editáveis para download.  

Banco de ideias inspiradoras e dicas de escrita.



• Módulo 5 – Ação, Submissão e Apoio:  

Checklist final de submissão (itens interativos para checagem).  

Orientações práticas: Como enviar propostas via plataformas online, e-mail e métodos tradicionais.  

Seção “Acompanhamento” com dicas para rastrear o status do edital.  

Rede de Apoio: Lista de contatos e organizações parceiras.



5.3. Funcionalidades Técnicas e de Navegação:



• Implementação da rota dinâmica [slug] para que cada módulo seja acessado por URLs amigáveis (/modulo/ferramentas, /modulo/pesquisa etc.).  
• Uso do next/link para navegação sem recarregamento de página.  
• Gerenciamento simples de estado (useState/useContext) para controlar, por exemplo, a abertura do menu no mobile e o estado dos checklists.  
• Otimização de performance com carregamento rápido de templates e imagens (uso de /public para ativos estáticos).



──────────────────────────────

REQUISITOS TÉCNICOS



6.1. Stack Tecnológica:  
• Framework/Base: Next.js (preferencialmente App Router) + React.  
• Estilização: Tailwind CSS (com opção de utilizar CSS Modules ou Styled Components conforme preferência).  
• Componentes: Criação de componentes customizados (Header, Sidebar, SidebarItem, ContentCard, DownloadButton, ChecklistItem, etc.).  
• Bibliotecas de Ícones: react-icons.



6.2. Estrutura de Pastas Sugerida (App Router):



/app  
 |–– layout.js                (Header, Sidebar)  
 |–– page.js                (Página inicial ou redirecionamento para o Módulo 1)  
 |–– globals.css  
 |–– modulo  
   |–– [slug]  
     |–– page.js        (Conteúdo dinâmico baseado no slug do módulo)  
 |–– components  
   |–– Header.js  
   |–– Sidebar.js  
   |–– SidebarItem.js  
   |–– ContentCard.js  
   |–– DownloadButton.js  
   |–– ChecklistItem.js  
 |–– public  
   |–– templates  
     |–– oficio.docx  
     |–– declaracao.odt  
     |–– orcamento.xlsx  



6.3. Boas Práticas de Acessibilidade (a11y):  
• Uso de HTML semântico (<header>, <nav>, <main>, <button>).  
• Atributos alt para imagens e ícones com papel informativo.  
• Garantir contraste adequado e responsividade para acessibilidade mobile.



──────────────────────────────

DIRETRIZES DE DESIGN E INTERAÇÃO



7.1. Simplicidade Visual:  
• Interface clara e sem excessos, com tipografia legível (ex.: Nunito Sans, Inter ou similar), uso de bastante espaço em branco e cores de contraste adequado (paleta com tons terrosos/ verdes).  
• Ícones utilizados de forma consistente (uso da biblioteca react-icons para padronização).



7.2. Responsividade e Mobile-first:  
• Design pensado inicialmente para telas pequenas, com adaptação fluída para desktop (menu sidebar como overlay ou push no mobile).



7.3. Consistência e Linguagem Acessível:  
• Rótulos, textos e instruções devem ser claros, com exemplos práticos e linguagem acessível para o público-alvo, evitando jargões ou explicando-os no glossário.

──────────────────────────────

CONSIDERAÇÕES FINAIS E ORIENTAÇÕES AO DESENVOLVEDOR



• Priorização da simplicidade e clareza, especialmente em dispositivos mobile.  
• Implementação incremental: iniciar com conteúdos “hardcoded” para validação de fluxo e UX; futuramente, considerar a integração com um Headless CMS para atualizações dinâmicas.  
• Manter a consistência visual e interação entre módulos, reforçando os aspectos “faça e confira” (checklists interativos, botões de download, guias visuais).  
• Otimização de performance utilizando boas práticas do Next.js (imagens otimizadas, pré-carregamento com next/link).

